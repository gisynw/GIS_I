{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-gis-i-cartography","title":"Welcome to GIS I (CARTOGRAPHY)","text":"<p>Hi there! Welcome to my GitHub repository, where I share teaching material. I'm excited to have you here!</p>"},{"location":"#about-me","title":"About Me","text":"<p>I am an Assistant Professor (AP) in Geography Department at The University of Central Arkansas. </p> <p>I hold a Ph.D. from the Department of Geospatial Information Sciences at the University of Texas at Dallas (\u5fb7\u5dde\u5927\u5b66\u8fbe\u62c9\u65af\u5206\u6821).</p>"},{"location":"#education","title":"Education","text":"<ul> <li>2019\u20132024 \u2003 Ph.D. in Geospatial Information Sciences. University of Texas at Dallas, Texas, USA</li> <li>2017\u20132019 \u2003 M.A. in Geography. Binghamton University (SUNY), New York, USA</li> <li>2012\u20132016 \u2003 B.S. in  Resource Environment and Urban-Rural Planning Management. Xi\u2019an University of Science and Technology, China</li> </ul>"},{"location":"#teaching","title":"Teaching","text":"<ul> <li>2025 \u2003  GEOG 3319 GEOGRAPHIC FIELD TECHNIQUES - UCA</li> <li>2025 \u2003  GEOG 2475 - GIS I (CARTOGRAPHY) - UCA</li> <li>2025 \u2003  SSJ 376 Spatial Database DVLP in PRAC - Clark University</li> <li>2025 \u2003  GEOG 386 Sptial Topics: Python Programming - Clark University</li> <li>2025 \u2003  GEOG 247 Intermediate Quantitative Methods in GEOG - Clark University</li> <li>2024 \u2003  SSJ 30262 Web Mapping &amp; Open Source GIS - Clark University</li> <li>2024  \u2003 SSJ 302 Python Programming &amp; SSJ 30274 Computer PROG for GIS - Clark University</li> <li>2022  \u2003 Principles of Geospatial Information Sciences -  University of Texas at Dallas</li> <li>2021  \u2003 Methods of Quantitative Analysis in the Social and Policy Science - University of Texas at Dallas</li> </ul>"},{"location":"Demo/Week01_Python_Intro/","title":"Week 1 Demo","text":"In\u00a0[4]: Copied! <pre>print(\"Hello, python\")\n</pre> print(\"Hello, python\") <pre>Hello, python\n</pre> In\u00a0[5]: Copied! <pre># This is comment: get result of 3+5\n3+5\n</pre> # This is comment: get result of 3+5 3+5 Out[5]: <pre>8</pre> <p>You can export a Jupyter Notebook as a Python file (.py), a PDF, or an HTML file. To export, select ... &gt; Export on the main toolbar. You're then presented with a dropdown of file format options.</p>"},{"location":"Demo/Week01_Python_Intro/#1.-Install-the-Visual-Studio-Code-(VS-Code)","title":"1. Install the Visual Studio Code (VS Code)\u00b6","text":"<p>Install Visual Studio Code</p>"},{"location":"Demo/Week01_Python_Intro/#2.-Install-Anaconda","title":"2. Install Anaconda\u00b6","text":"<p>To install Anaconda, download the installer from the Anaconda website. The installer will ask you to accept the license agreement, choose the installation directory.</p>"},{"location":"Demo/Week01_Python_Intro/#3.-Select-interpreter-in-VS-code","title":"3. Select interpreter in VS code\u00b6","text":"<p>if it is your first time to select interpretr, you need to install two extensions from extensions in the left side bar:</p> <ul> <li>Python</li> <li>Jupyter</li> </ul> <p></p> <p> </p>"},{"location":"Demo/Week01_Python_Intro/#The-Python:Select-Interpreter-(Ctrl+Shift+P)-command-displays-a-list-of-available-gloabl-environments,-conda-environments,-and-virtual-environments.","title":"The Python:Select Interpreter (Ctrl+Shift+P) command displays a list of available gloabl environments, conda environments, and virtual environments.\u00b6","text":""},{"location":"Demo/Week01_Python_Intro/#4.-Create-a-Juputer-Notebook","title":"4. Create a Juputer Notebook\u00b6","text":"<p>You can create a Jupyter Notebook by running the Create: New Jupyter Notebook command from the Command Palette (Ctrl+Shift+P) or by creating a new .ipynb file in your workspace.</p> <p>Or, you can select 'File' &gt; 'New File'</p>"},{"location":"Demo/Week01_Python_Intro/#5.-Start-your-first-Jupyter-Notebook","title":"5. Start your first Jupyter Notebook\u00b6","text":"<ul> <li>Developed originally by UC Berkeley's Ferando Perez</li> <li>Contain code &amp; rich text elements</li> <li>Perfect for sharing your analysis with others</li> <li>Gret for sharing your analysis with others</li> </ul>"},{"location":"Demo/Week01_Python_Intro/#6.-Writing-in-Markdown","title":"6. Writing in Markdown\u00b6","text":""},{"location":"Demo/Week01_Python_Intro/#6.1-Change-font-size","title":"6.1 Change font size\u00b6","text":"<ul> <li>In markdown, we talk about headings instead of font size<ul> <li>use # to adjust the size</li> </ul> </li> </ul>"},{"location":"Demo/Week01_Python_Intro/#Heading-1","title":"Heading 1\u00b6","text":""},{"location":"Demo/Week01_Python_Intro/#Heading-2","title":"Heading 2\u00b6","text":""},{"location":"Demo/Week01_Python_Intro/#Heading-3","title":"Heading 3\u00b6","text":"<p>sentence</p>"},{"location":"Demo/Week01_Python_Intro/#6.2-Formtted-text","title":"6.2 Formtted text\u00b6","text":"<ul> <li>Different styling (bold/italic), bulleted lists, etc</li> <li>In Jupyter, we call these text elements markdown</li> </ul> <p>Note: when you edit in VS Code, you can open Auto Save under File</p>"},{"location":"Demo/Week01_Python_Intro/#6.3-Bold/Italic","title":"6.3 Bold/Italic\u00b6","text":"<p>Thi is bold and this is italic</p>"},{"location":"Demo/Week01_Python_Intro/#6.4-Buid-lists","title":"6.4 Buid lists\u00b6","text":"<p>The asterisk symbol can be used to created bulleted lists as follows (use tabs to indent)</p> <ul> <li>Point one<ul> <li>Point two</li> </ul> </li> <li>Point Three</li> </ul>"},{"location":"Demo/Week01_Python_Intro/#6.5-Creating-a-new-line","title":"6.5 Creating a new line\u00b6","text":"<p>Include two spaces at the end of the line</p>"},{"location":"Demo/Week01_Python_Intro/#7.-Code-cells","title":"7. Code cells\u00b6","text":""},{"location":"Demo/Week01_Python_Intro/#8.-Save-your-Jupyter-Notebook","title":"8. Save your Jupyter Notebook\u00b6","text":"<p>You can save your Jupyter Notebook using the keyboard shortcut (Ctrl+S) or File &gt; Save.</p>"},{"location":"Demo/Week01_Python_Intro/#9.-Export-your-Jupyter-Notebook","title":"9. Export your Jupyter Notebook\u00b6","text":""},{"location":"Demo/Week01_Python_Intro/#10.-Virtual-environment","title":"10. Virtual environment\u00b6","text":""},{"location":"Demo/Week01_Python_Intro/#10.1-Create-a-virtual-environment-in-terminal","title":"10.1 Create a virtual environment in terminal\u00b6","text":"<p>Right click the Anaconda prompt and Run as Administrator (This step will ensure that your package is installed in Anaconda/env folder)</p> <p>The  following command creates a conda environment named np with a Python 3.9 interpreter</p> <pre>conda create -n np python=3.9\n</pre>"},{"location":"Demo/Week01_Python_Intro/#10.2-Check-conda-is-installed","title":"10.2 Check conda is installed\u00b6","text":"<pre>conda -V\n</pre>"},{"location":"Demo/Week01_Python_Intro/#10.3-List-virtual-environment","title":"10.3 List virtual environment\u00b6","text":"<p>now if you list virgual envionment, you can see the virtual environment that you just create.</p> <pre>conda env list\n</pre> <p>For example, I have three virtual environment: base, arcpu_pro, np</p> <p></p>"},{"location":"Demo/Week01_Python_Intro/#10.4-Activate-virtual-environment","title":"10.4 Activate virtual environment\u00b6","text":"<p>if you virtual environment named as 'np'</p> <pre>activate np\n</pre> <p></p>"},{"location":"Demo/Week01_Python_Intro/#10.5-Install-packages-(e.g.,-numpy)","title":"10.5 Install packages (e.g., numpy)\u00b6","text":"<pre>conda install numpy\n</pre>"},{"location":"Demo/Week01_Python_Intro/#11.-Delete-a-no-longer-needed-virtual-environment","title":"11. Delete a no longer needed virtual environment\u00b6","text":"<p>For example, delete a virtual environment 'np'</p> <pre>conda remove -n np --all -y\n</pre>"},{"location":"Demo/Week06_visualization_Demo/","title":"Week06 visualization Demo","text":"In\u00a0[1]: Copied! <pre>notebook_path = Path(os.path.abspath(\"__file__\")).parent\nos.chdir(notebook_path)\nos.getcwd()\n</pre> notebook_path = Path(os.path.abspath(\"__file__\")).parent os.chdir(notebook_path) os.getcwd() <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[1], line 1\n----&gt; 1 notebook_path = Path(os.path.abspath(\"__file__\")).parent\n      2 os.chdir(notebook_path)\n      3 os.getcwd()\n\nNameError: name 'Path' is not defined</pre> In\u00a0[9]: Copied! <pre>import pandas as pd\ndata = pd.read_csv('./Worcester_Police_Use_of_Force_Incidents_(July_2024).csv')\n\n# Convert 'Date___Time' column to datetime format\ndata['Date___Time'] = pd.to_datetime(data['Date___Time'], format='%m/%d/%y %I:%M %p')\n\n# Create a new column for the date\ndata['Date'] = data['Date___Time'].dt.date\n\n# Group data by date and count incidents per day\nincidents_per_day = data.groupby('Date').size()\n</pre> import pandas as pd data = pd.read_csv('./Worcester_Police_Use_of_Force_Incidents_(July_2024).csv')  # Convert 'Date___Time' column to datetime format data['Date___Time'] = pd.to_datetime(data['Date___Time'], format='%m/%d/%y %I:%M %p')  # Create a new column for the date data['Date'] = data['Date___Time'].dt.date  # Group data by date and count incidents per day incidents_per_day = data.groupby('Date').size() In\u00a0[3]: Copied! <pre>import plotly.express as px\nimport pandas as pd\n\n# Sample time series data\n# Assuming 'incidents_per_day' is a Pandas Series with a DateTime index\n# Creating some mock data for this example\ndate_rng = pd.date_range(start='2023-01-01', end='2023-12-31', freq='D')\n\n# Create the line plot\nfig = px.line(x=incidents_per_day.index, \n              y=incidents_per_day.values, \n              labels={'x': 'Date', 'y': 'Incidents'},\n              title='Interactive Time Series with Date Range Selector',\n              line_shape='spline')\n\n# Add a range slider for selecting the time range\nfig.update_layout(\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([\n                dict(count=1, label=\"1 Month\", step=\"month\", stepmode=\"backward\"),\n                dict(count=6, label=\"6 Months\", step=\"month\", stepmode=\"backward\"),\n                dict(count=1, label=\"1 Year\", step=\"year\", stepmode=\"backward\"),\n                dict(step=\"all\", label=\"All Time\")\n            ])\n        ),\n        rangeslider=dict(visible=True),  # Show the range slider below the x-axis\n        type=\"date\"\n    )\n)\n\n# Show the plot\nfig.show()\n</pre> import plotly.express as px import pandas as pd  # Sample time series data # Assuming 'incidents_per_day' is a Pandas Series with a DateTime index # Creating some mock data for this example date_rng = pd.date_range(start='2023-01-01', end='2023-12-31', freq='D')  # Create the line plot fig = px.line(x=incidents_per_day.index,                y=incidents_per_day.values,                labels={'x': 'Date', 'y': 'Incidents'},               title='Interactive Time Series with Date Range Selector',               line_shape='spline')  # Add a range slider for selecting the time range fig.update_layout(     xaxis=dict(         rangeselector=dict(             buttons=list([                 dict(count=1, label=\"1 Month\", step=\"month\", stepmode=\"backward\"),                 dict(count=6, label=\"6 Months\", step=\"month\", stepmode=\"backward\"),                 dict(count=1, label=\"1 Year\", step=\"year\", stepmode=\"backward\"),                 dict(step=\"all\", label=\"All Time\")             ])         ),         rangeslider=dict(visible=True),  # Show the range slider below the x-axis         type=\"date\"     ) )  # Show the plot fig.show()"},{"location":"software/Anaconda/","title":"Anaconda","text":"<pre># check python location\nwhere python\n\n# check python version \npython -V\n</pre>"},{"location":"software/Anaconda/#Anaconda","title":"Anaconda\u00b6","text":"<p>Anaconda Distribution is a popular platform that contains</p> <ul> <li>conda - a package and environment manager for your command line interface</li> <li>Over 300 automaticall-installed packages</li> </ul>"},{"location":"software/Anaconda/#Installation","title":"Installation\u00b6","text":"<p>To install Anaconda, download the installer from the Anaconda website. The installer will ask you to accept the license agreement, choose the installation directory.</p>"},{"location":"software/Anaconda/#Usage","title":"Usage\u00b6","text":"<p>After installing Anaconda, you can open the Anaconda Prompt to chekc your python version</p>"},{"location":"software/Anaconda/#check-python","title":"check python\u00b6","text":""},{"location":"software/Anaconda/#list-virtual-environment","title":"list virtual environment\u00b6","text":"<pre>conda env list\n</pre>"},{"location":"software/Anaconda/#Setting-up-virtual-environment","title":"Setting up virtual environment\u00b6","text":""},{"location":"software/Anaconda/#Create-a-virtual-environment","title":"Create a virtual environment\u00b6","text":"<p>Run the Anaconda as administor to install the virtual environment underanaconda</p> <pre>conda create --name name_of_your_virtual_environment\n</pre> <p>For example, create a virtual environment named 'spatial'</p> <p></p>"},{"location":"software/Anaconda/#List-virtual-environment","title":"List virtual environment\u00b6","text":"<p>now if you list virgual envionment, you can see all the virutla environment under Anaconda</p> <pre>conda env list\n</pre> <p></p>"},{"location":"software/Anaconda/#Activate-virtual-environment","title":"Activate virtual environment\u00b6","text":"<p>Activate 'spatial' virtual environment</p> <pre>activate spatial\n</pre>"},{"location":"software/Anaconda/#Install-packages-(e.g.,-geopandas)","title":"Install packages (e.g., geopandas)\u00b6","text":"<pre>conda install geopandas\n</pre>"},{"location":"software/ArcGISPro/","title":"ArcGIS Pro","text":"In\u00a0[\u00a0]: Copied!"},{"location":"software/ArcGISPro/#Set-up-ArcGIS-Pro-Account","title":"Set up ArcGIS Pro Account\u00b6","text":"<p>You should get an invitation email to set up your ArcGIS account</p> <p>The account is composed by your user name and clarku, e.g., yanawu_clarku.</p>"},{"location":"software/ArcGISPro/#Log-in-ArcGIS-Online","title":"Log in ArcGIS Online\u00b6","text":"<ul> <li><p>Log in ArcGIS Online</p> </li> <li><p>At the top of the page, click your username and click My settings.</p> </li> <li><p>On the My settings page, click the Licenses side tab</p> </li> <li><p>Next to ArcGIS Pro, click Download ArcGIS Pro (If you don't see ArcGIS Pro listed under your licensed products, please contact HelpDesk and JoDolan@clarku.edu).</p> </li> <li><p>In the Download ArcGIS Pro window, review the language setting. To download a localized version of ArcGIS Pro, change the setting to the language you want.</p> </li> <li><p>Click Download.</p> </li> </ul> <p>An executable file (.exe) is downloaded to your computer.</p>"},{"location":"software/Arcpy/","title":"Arcpy","text":"<p>ArcPy is a Python site package that provides a set of tools for geographic data analysis and automation. While it's integrated into ArcGIS Pro, you can also use it outside of ArcGIS Pro by configuring the Python environment properly.</p> <p>Locate the path of the default ArcGIS Python environment (typically: C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\envs\\arcgispro-py3).</p>"},{"location":"software/Arcpy/#Using-ArcPy-Outside-of-ArcGIS-Pro","title":"Using ArcPy Outside of ArcGIS Pro\u00b6","text":""},{"location":"software/Arcpy/#Step-1:-Find-the-ArcGIS-Python-Environment","title":"Step 1: Find the ArcGIS Python Environment\u00b6","text":""},{"location":"software/Arcpy/#Step-2:-Activate-the-Environment","title":"Step 2: Activate the Environment\u00b6","text":"<p>Go to the anaconda virtual environment folder</p> <p>Copy the arcgisori-py3 to the anaconda virtual environment folder</p>"},{"location":"software/Visual-Studio-Code/","title":"Visual Studio Code","text":""},{"location":"software/Visual-Studio-Code/#Visual-Studio-Code","title":"Visual Studio Code\u00b6","text":"<p>It is a free source code editor developed by Microsoft. It supports a wide range of programming languages and frameworks, offering features like syntax highlighting, debuging, integrated Git Control, and extensions to enhance functionality.</p>"},{"location":"software/Visual-Studio-Code/#Installation","title":"Installation\u00b6","text":""},{"location":"software/Visual-Studio-Code/#Install-Visual-Studio-Code","title":"Install Visual Studio Code\u00b6","text":""}]}